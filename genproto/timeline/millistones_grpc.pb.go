// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: millistones.proto

package timeline

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MillistonesService_Create_FullMethodName               = "/timeline.MillistonesService/Create"
	MillistonesService_Update_FullMethodName               = "/timeline.MillistonesService/Update"
	MillistonesService_Delete_FullMethodName               = "/timeline.MillistonesService/Delete"
	MillistonesService_Get_FullMethodName                  = "/timeline.MillistonesService/Get"
	MillistonesService_GetAll_FullMethodName               = "/timeline.MillistonesService/GetAll"
	MillistonesService_GetByDateMillistones_FullMethodName = "/timeline.MillistonesService/GetByDateMillistones"
)

// MillistonesServiceClient is the client API for MillistonesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MillistonesServiceClient interface {
	Create(ctx context.Context, in *MillistonesCreate, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *MillistonesUpdate, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error)
	Get(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Millistones, error)
	GetAll(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*GetAllRes, error)
	GetByDateMillistones(ctx context.Context, in *GetByDate, opts ...grpc.CallOption) (*GetAllRes, error)
}

type millistonesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMillistonesServiceClient(cc grpc.ClientConnInterface) MillistonesServiceClient {
	return &millistonesServiceClient{cc}
}

func (c *millistonesServiceClient) Create(ctx context.Context, in *MillistonesCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, MillistonesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *millistonesServiceClient) Update(ctx context.Context, in *MillistonesUpdate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, MillistonesService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *millistonesServiceClient) Delete(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, MillistonesService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *millistonesServiceClient) Get(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Millistones, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Millistones)
	err := c.cc.Invoke(ctx, MillistonesService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *millistonesServiceClient) GetAll(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*GetAllRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllRes)
	err := c.cc.Invoke(ctx, MillistonesService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *millistonesServiceClient) GetByDateMillistones(ctx context.Context, in *GetByDate, opts ...grpc.CallOption) (*GetAllRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllRes)
	err := c.cc.Invoke(ctx, MillistonesService_GetByDateMillistones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MillistonesServiceServer is the server API for MillistonesService service.
// All implementations must embed UnimplementedMillistonesServiceServer
// for forward compatibility
type MillistonesServiceServer interface {
	Create(context.Context, *MillistonesCreate) (*Void, error)
	Update(context.Context, *MillistonesUpdate) (*Void, error)
	Delete(context.Context, *GetById) (*Void, error)
	Get(context.Context, *GetById) (*Millistones, error)
	GetAll(context.Context, *GetAllReq) (*GetAllRes, error)
	GetByDateMillistones(context.Context, *GetByDate) (*GetAllRes, error)
	mustEmbedUnimplementedMillistonesServiceServer()
}

// UnimplementedMillistonesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMillistonesServiceServer struct {
}

func (UnimplementedMillistonesServiceServer) Create(context.Context, *MillistonesCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMillistonesServiceServer) Update(context.Context, *MillistonesUpdate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMillistonesServiceServer) Delete(context.Context, *GetById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMillistonesServiceServer) Get(context.Context, *GetById) (*Millistones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMillistonesServiceServer) GetAll(context.Context, *GetAllReq) (*GetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedMillistonesServiceServer) GetByDateMillistones(context.Context, *GetByDate) (*GetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByDateMillistones not implemented")
}
func (UnimplementedMillistonesServiceServer) mustEmbedUnimplementedMillistonesServiceServer() {}

// UnsafeMillistonesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MillistonesServiceServer will
// result in compilation errors.
type UnsafeMillistonesServiceServer interface {
	mustEmbedUnimplementedMillistonesServiceServer()
}

func RegisterMillistonesServiceServer(s grpc.ServiceRegistrar, srv MillistonesServiceServer) {
	s.RegisterService(&MillistonesService_ServiceDesc, srv)
}

func _MillistonesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MillistonesCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MillistonesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MillistonesService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MillistonesServiceServer).Create(ctx, req.(*MillistonesCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MillistonesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MillistonesUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MillistonesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MillistonesService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MillistonesServiceServer).Update(ctx, req.(*MillistonesUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MillistonesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MillistonesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MillistonesService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MillistonesServiceServer).Delete(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MillistonesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MillistonesServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MillistonesService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MillistonesServiceServer).Get(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MillistonesService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MillistonesServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MillistonesService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MillistonesServiceServer).GetAll(ctx, req.(*GetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MillistonesService_GetByDateMillistones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MillistonesServiceServer).GetByDateMillistones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MillistonesService_GetByDateMillistones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MillistonesServiceServer).GetByDateMillistones(ctx, req.(*GetByDate))
	}
	return interceptor(ctx, in, info, handler)
}

// MillistonesService_ServiceDesc is the grpc.ServiceDesc for MillistonesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MillistonesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timeline.MillistonesService",
	HandlerType: (*MillistonesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MillistonesService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MillistonesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MillistonesService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MillistonesService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _MillistonesService_GetAll_Handler,
		},
		{
			MethodName: "GetByDateMillistones",
			Handler:    _MillistonesService_GetByDateMillistones_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "millistones.proto",
}
